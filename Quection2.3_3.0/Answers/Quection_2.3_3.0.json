{"paragraphs":[{"text":"sc","user":"anonymous","dateUpdated":"2020-01-08T18:02:07+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res1: org.apache.spark.SparkContext = org.apache.spark.SparkContext@66e96795\n"}]},"apps":[],"jobName":"paragraph_1578506408066_-602769815","id":"20191221-035204_313761638","dateCreated":"2020-01-08T18:00:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:881","dateFinished":"2020-01-08T18:02:07+0000","dateStarted":"2020-01-08T18:02:07+0000"},{"title":"Question 2.3.1 ","text":"%pyspark  \r\nimport pyspark.sql.functions as func\r\nfrom pyspark.sql.types import *\r\n\r\ndf = spark.read.csv(\"/data/listingsnew.csv\", header=True)\r\ndf = df.withColumn(\"price\", df[\"price\"].cast(DoubleType()))\r\ndf.createOrReplaceTempView(\"airbnb\")\r\n#df.printSchema()\r\n\r\nsqlDF = spark.sql(\"SELECT (Count(*) * 100/ (Select Count(distinct host_name) From airbnb)) As Precentage From (SELECT Count(distinct host_name),host_name FROM airbnb Group by host_name  HAVING Count(host_name) >1)\")\r\nsqlDF=sqlDF.withColumn(\"Precentage\", func.round(sqlDF[\"Precentage\"],2))\r\nsqlDF.coalesce(1).write.mode(\"append\").json(\"/data/output/1_precentage_more_than_1_property\")\r\n\r\n\r\nsqlDF.show(15000)","user":"anonymous","dateUpdated":"2020-01-08T18:01:08+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------+\n|Precentage|\n+----------+\n|     40.43|\n+----------+\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=5","http://172.17.0.2:4040/jobs/job?id=6","http://172.17.0.2:4040/jobs/job?id=7","http://172.17.0.2:4040/jobs/job?id=8","http://172.17.0.2:4040/jobs/job?id=9"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578506408070_801396974","id":"20191221-035208_339098910","dateCreated":"2020-01-08T18:00:08+0000","dateStarted":"2020-01-08T18:01:08+0000","dateFinished":"2020-01-08T18:01:13+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:882"},{"title":"Question 2.3.2","text":"%pyspark\n\nimport matplotlib.pyplot as plt\nimport matplotlib.pyplot as plt2\nfrom pyspark.sql.functions import month\nimport pandas as pd\nimport numpy as np\nimport datetime\nfrom matplotlib.ticker import FuncFormatter\nimport calendar\nimport datetime\n\n%matplotlib inline\n\n#############################Bar Plot For Monthly Reviews ############################################################\n\ndf = spark.read.csv(\"/data/listingsnew.csv\", header=True)\ndf =df.withColumn(\"last_review\",month(df[\"last_review\"]))\ndf.createOrReplaceTempView(\"airbnb\")\nsqlDF = spark.sql(\"SELECT * FROM (SELECT last_review as Last_Review_Month,sum(number_of_reviews) as NumberOfReviews FROM airbnb where last_review is not null group by last_review order by last_review)\")\n\n\nsqlDF.coalesce(1).write.mode(\"append\").json(\"/data/output/2_rentals_reviewed_over_time_json\")\n\n\nxmonths=[]\nyReviews=[]\n\n\nmonthlist = sqlDF.rdd.map(lambda p: p.Last_Review_Month).collect()\nfor month in monthlist:\n     xmonths.append(calendar.month_abbr[month])\n\nreviewlist = sqlDF.rdd.map(lambda p: p.NumberOfReviews).collect()\nfor review in reviewlist:\n     yReviews.append(review)\n \n\nfig, ax = plt.subplots()\nindex = np.arange(12)\nbar_width = 0.8\nopacity = 0.5\n\nrects1 = plt.bar(index, yReviews, bar_width,\nalpha=opacity,\ncolor='b',\nlabel='Reviews')\n\nplt.xlabel('Months') #xlabel\nplt.ylabel('Reviews') #y alable\nplt.title('Monthly Analysis for Reviews') #Heading \nplt.xticks(index, xmonths)\nplt.legend()\nplt.tight_layout()\nplt.show()\n\n###############################################################################\n\n###############Histrogram Creation############################################\n\ndf2 = spark.read.csv(\"/data/listingsnew.csv\", header=True)\ndf2.createOrReplaceTempView(\"airbnbHistro\")\nsqlDF1 = spark.sql(\"SELECT last_review FROM airbnbHistro where last_review is not null\")\nmonthlistval = sqlDF1.rdd.map(lambda p: p.last_review).collect()\ndtm = lambda x: int(x[5:7])\nmonths = list(map(dtm, monthlistval))\n\nplt2.title('Histrogram of Monthly Granularity')\nplt2.hist(months, bins=[1,2,3,4,5,6,7,8,9,10,11,12],color = \"firebrick\")\n\n##########################################################################","user":"anonymous","dateUpdated":"2020-01-08T18:01:21+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"<matplotlib.figure.Figure at 0x7ff7b1035f50>\n"},{"type":"IMG","data":"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O0s6NgVVyAJhFMtXxCPAO8D30uCMA4AvABNL2Lc+48muZ9UOtvgl2d97h9TWnpKOLMg/hewLyw+BW+uczQGQ0q4HLpe0VSqnl6TCa433A2ewrjvvvjrrzXmdrEocoKziIuKfETGrns3fIvtQXEB20f03wLgSi76S7PrFckljmti88cAeNN69d01EvFb4IPuwLeXHsRPIuspeITtTfLihzClQ/h7Ykawrsdb/A24jC05zyT5siwXzvYFH0ii9ycC3I+KFxhoZER+SBZLDyM5SrgFOiIjnGtu3kTLHAP+Tkq5MbZomaSXZa7FPQf7a7tNDyN4L9TmHbPDFw6nb9G6yLxC17if7YjCjnnVo4utk1SPfsNA2ZJKGkn3I9yn2bb21SLoQ+EREfK3RzGbtlK9B2QYrDTD4NnBDzoLTFmTdosc3ltesPXMXn22QJO0CvEk2bP2KVm7OWpK+TjaQ4M6ImNFYfrP2zF18ZmaWSz6DMjOzXNrgrkFtueWW0adPn9ZuhpnZBmv27NlLI6JnY/k2uADVp08fZs2qb8SzmZlVmqQXG8/lLj4zM8spBygzM8slBygzM8ulDe4alJlZU61atYqamhref7++O41YoU6dOtG7d286diw26X7jHKDMzEpUU1ND165d6dOnD1r/Rs1WICJ44403qKmpYccdd2xSGe7iMzMr0fvvv0+PHj0cnEogiR49ejTrbNMBysysDA5OpWvua+UAZWZmueRrUGZmTXTRRdUvr0OHDuyxxx6sXr2aHXfckZtvvpnu3buXXdeiRYs488wzue2228pvaJVUNEBJ6g7cAOxOdrfKk8luUX0r0Ifs9tdfjojlys4FryS7Nfi7wIkR8VgqZyRwQSr2xxExPqXvBfyK7NbQU8huOObZb80qoKU/jCtdbnvVuXNn5syZA8DIkSO5+uqrOf/888suZ9ttt811cILKd/FdCdwVEZ8C+pHdBfRc4J6I6Avck9Yhu4tn3/QYBYyFtffGGU12183BwGhJm6d9xqa8tfsNr/DxmJnlxn777ccrr7yydv3nP/85e++9N3vuuSejR48G4JxzzuGaa65Zm+eiiy7isssuY+HChey+++4ArFmzhrPPPnvtvtdeey0A3/zmN5k8eTIARx99NCeffDIAN954IxdccAHvvPMOn//85+nXrx+77747t956a4seX8UClKTNgKHAjZDd+jki3gSOJLvNNun5qLR8JDAhMg8D3SVtAwwDpkfEsohYDkwHhqdtm0XEQ+msaUJBWWZm7dqaNWu45557+OIXvwjAtGnTmDdvHo8++ihz5sxh9uzZzJgxgxEjRnwkcEyaNIljjz32I2XdeOONdOvWjZkzZzJz5kyuv/56XnjhBYYOHcoDDzwAwCuvvMKzzz4LwIMPPsiQIUO466672HbbbXniiSd4+umnGT68Zc8RKnkGtROwBLhJ0uOSbpD0cWDriHgVID1vlfL3IrtRW62alNZQek2R9PVIGiVplqRZS5Ysaf6RmZm1kvfee4/+/fvTo0cPli1bxuc+9zkgC1DTpk1jwIABDBw4kOeee4558+YxYMAAFi9ezKJFi3jiiSfYfPPN2X777T9S5rRp05gwYQL9+/dnn3324Y033mDevHkMGTKEBx54gGeffZZdd92VrbfemldffZWHHnqIT3/60+yxxx7cfffdnHPOOTzwwAN069atRY+1ktegNgYGAt+KiEckXcm67rxiio1HjCakr58YcR1wHcCgQYN8jcrM2qzaa1ArVqzgiCOO4Oqrr+bMM88kIjjvvPM47bTT1tvnmGOO4bbbbuO1115jxIgR622PCK666iqGDRu23rbly5dz1113MXToUJYtW8akSZPo0qULXbt2pWvXrsyePZspU6Zw3nnnceihh3LhhRe22LFW8gyqBqiJiEfS+m1kAev11D1Hel5ckH+7gv17A4saSe9dJN3MrN3r1q0bY8aM4dJLL2XVqlUMGzaMcePG8fbbbwNZl9zixdnH64gRI5g4cSK33XYbxxxzzHplDRs2jLFjx7Jq1SoAnn/+ed555x0gu851xRVXMHToUIYMGcKll17KkCFDgGwk4KabbsrXvvY1zjrrLB577LEWPcaKnUFFxGuSXpb0yYj4B3Aw8Gx6jAQuSc93pF0mA2dImkg2IGJFRLwqaSrwk4KBEYcC50XEMkkrJe0LPAKcAFxVqeMxM6urtUcgDhgwgH79+jFx4kSOP/545s6dy3777QdAly5duOWWW9hqq63YbbfdWLlyJb169WKbbbZZr5xTTz2VhQsXMnDgQCKCnj17cvvttwMwZMgQpk2bxs4778wOO+zAsmXL1gaop556irPPPpuNNtqIjh07Mnbs2BY9PlVyVLak/mTDzDcBFgAnkZ21TQK2B14C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\n\n"},{"type":"TEXT","data":"(array([  242.,   237.,   236.,   249.,   334.,   455.,   984.,  1824.,\n          150.,   125.,   313.]),\n array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12]),\n <a list of 11 Patch objects>)<matplotlib.figure.Figure at 0x7ff7b0cd81d0>\n"},{"type":"IMG","data":"\n"}]},"apps":[],"jobName":"paragraph_1578506408071_16010484","id":"20191221-035252_1066759249","dateCreated":"2020-01-08T18:00:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:883","dateFinished":"2020-01-08T18:01:28+0000","dateStarted":"2020-01-08T18:01:21+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=10","http://172.17.0.2:4040/jobs/job?id=11","http://172.17.0.2:4040/jobs/job?id=12","http://172.17.0.2:4040/jobs/job?id=13","http://172.17.0.2:4040/jobs/job?id=14","http://172.17.0.2:4040/jobs/job?id=15","http://172.17.0.2:4040/jobs/job?id=16","http://172.17.0.2:4040/jobs/job?id=17"],"interpreterSettingId":"spark"}}},{"title":"Question 2.3.3 ","text":"%pyspark\nfrom pyspark.sql.types import *\n\ndf = spark.read.csv(\"/data/listingsnew.csv\", header=True)\ndf = df.withColumn(\"availability_365\", df[\"availability_365\"].cast(IntegerType()))\ndf = df.withColumn(\"price\", df[\"price\"].cast(DoubleType()))\ndf.createOrReplaceTempView(\"airbnb\")\nsqlDF = spark.sql(\"SELECT neighbourhood as neighbourhood,Count(availability_365) as 365AvailableCount ,((sum(price)*100)/(Select count(*) from airbnb)) as Average_prices_for_nabourhood   FROM airbnb where availability_365=365 and price is not NULL  group by neighbourhood order by Average_prices_for_nabourhood desc Limit 5\")\n\nsqlDF=sqlDF.withColumn(\"Average_prices_for_nabourhood\", func.round(sqlDF[\"Average_prices_for_nabourhood\"],2))\nsqlDF.show(8000)\nsqlDF.write.format(\"com.databricks.spark.csv\").save(\"/data/output/3_Spartk_rentals_that_are_available_all_365.csv\")\n","user":"anonymous","dateUpdated":"2020-01-08T18:01:39+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"+-------------+-----------------+-----------------------------+\n|neighbourhood|365AvailableCount|Average_prices_for_nabourhood|\n+-------------+-----------------+-----------------------------+\n|      Kallang|              153|                       384.81|\n|       Novena|              108|                       250.59|\n|      Geylang|               81|                       247.26|\n|       Rochor|               69|                       195.16|\n|       Outram|               41|                       151.74|\n+-------------+-----------------+-----------------------------+\n\n\u001b[0;31m\u001b[0m\n\u001b[0;31mAnalysisException\u001b[0mTraceback (most recent call last)\n\u001b[0;32m<ipython-input-10-64aeb0104090>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0msqlDF\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msqlDF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwithColumn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Average_prices_for_nabourhood\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mround\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msqlDF\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"Average_prices_for_nabourhood\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0msqlDF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m8000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0msqlDF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"com.databricks.spark.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"/data/output/3_Spartk_rentals_that_are_available_all_365.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\n\u001b[0;32m/zeppelin/interpreter/spark/pyspark/pyspark.zip/pyspark/sql/readwriter.py\u001b[0m in \u001b[0;36msave\u001b[0;34m(self, path, format, mode, partitionBy, **options)\u001b[0m\n\u001b[1;32m    593\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jwrite\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    594\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 595\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jwrite\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    596\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    597\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0msince\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1.4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/zeppelin/interpreter/spark/pyspark/py4j-0.10.4-src.zip/py4j/java_gateway.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m   1131\u001b[0m         \u001b[0manswer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgateway_client\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_command\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcommand\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1132\u001b[0m         return_value = get_return_value(\n\u001b[0;32m-> 1133\u001b[0;31m             answer, self.gateway_client, self.target_id, self.name)\n\u001b[0m\u001b[1;32m   1134\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1135\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mtemp_arg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtemp_args\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/zeppelin/interpreter/spark/pyspark/pyspark.zip/pyspark/sql/utils.py\u001b[0m in \u001b[0;36mdeco\u001b[0;34m(*a, **kw)\u001b[0m\n\u001b[1;32m     67\u001b[0m                                              e.java_exception.getStackTrace()))\n\u001b[1;32m     68\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'org.apache.spark.sql.AnalysisException: '\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 69\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mAnalysisException\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m': '\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstackTrace\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     70\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'org.apache.spark.sql.catalyst.analysis'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     71\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mAnalysisException\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m': '\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstackTrace\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;31mAnalysisException\u001b[0m: u'path file:/data/output/3_Spartk_rentals_that_are_available_all_365.csv already exists.;'"}]},"apps":[],"jobName":"paragraph_1578506408072_1283019481","id":"20191221-064528_1996866080","dateCreated":"2020-01-08T18:00:08+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:884","dateFinished":"2020-01-08T18:01:40+0000","dateStarted":"2020-01-08T18:01:39+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=18","http://172.17.0.2:4040/jobs/job?id=19","http://172.17.0.2:4040/jobs/job?id=20"],"interpreterSettingId":"spark"}}},{"title":"Question 3","text":"%pyspark\nfrom pyspark.ml.feature import VectorAssembler\nfrom pyspark.ml.regression import LinearRegression\nfrom pyspark.ml.regression import RandomForestRegressor\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.evaluation import RegressionEvaluator\nfrom pyspark.sql import functions as f\nfrom pyspark.ml.feature import VectorIndexer\n\ncompany_df = sqlContext.read.format(\"com.databricks.spark.csv\").options(header=\"true\", inferschema=\"true\").load(\"/data/listingsnew.csv\")\ncompany_df=company_df.withColumn(\"neighbourhood_group_number\", f.when(f.col(\"neighbourhood_group\") == \"North Region\",0)\n                                 .when(f.col(\"neighbourhood_group\") == \"Central Region\",1)\n                                 .when(f.col(\"neighbourhood_group\") == \"East Region\",2)\n                                 .when(f.col(\"neighbourhood_group\") == \"North-East Region\",3)\n                                 .when(f.col(\"neighbourhood_group\") == \"West Region\",4)\n                                 .otherwise(5))\n\nvectorAssembler = VectorAssembler(inputCols = [\"neighbourhood_group_number\", \"latitude\",\"longitude\"], outputCol = \"features\")\ntcompany_df = vectorAssembler.transform(company_df)\ntcompany_df = tcompany_df.select([\"features\", \"neighbourhood_group_number\"])\n#tcompany_df.show(3)\n\nfeatureIndexer =VectorIndexer(inputCol=\"features\", outputCol=\"indexedFeatures\", maxCategories=5).fit(tcompany_df)\nrf = RandomForestRegressor(featuresCol=\"indexedFeatures\",labelCol=\"neighbourhood_group_number\")\n\n# Split data into training (80%) and test (20%)\ntraining, test = tcompany_df.randomSplit([0.8, 0.2], seed=11)\ntraining.cache()\n\n\npipeline = Pipeline(stages=[featureIndexer, rf])\n\nmodel = pipeline.fit(training)\n\n# Make predictions.\npredictions = model.transform(test)\n\n# Select example rows to display.\nnewDataFream=predictions.select(\"prediction\", \"neighbourhood_group_number\", \"features\")\nnewDataFream=newDataFream.withColumn(\"neighbourhood_group_number\", f.when(f.col(\"neighbourhood_group_number\") == 0,\"North Region\")\n                                 .when(f.col(\"neighbourhood_group_number\") == 1,\"Central Region\")\n                                 .when(f.col(\"neighbourhood_group_number\") == 2,\"East Region\")\n                                 .when(f.col(\"neighbourhood_group_number\") == 3,\"North-East Region\")\n                                 .when(f.col(\"neighbourhood_group_number\") == 4,\"West Region\"))\nnewDataFream.show(10)                                 \n\n\n# Select (prediction, true label) and compute test error\nevaluator = RegressionEvaluator(labelCol=\"neighbourhood_group_number\", predictionCol=\"prediction\", metricName=\"rmse\")\nrmse = evaluator.evaluate(predictions)\nprint(\"Root Mean Squared Error (RMSE) on test data = %g\" % rmse)\n\nrfModel = model.stages[1]\nprint(rfModel)\n\n\n","user":"anonymous","dateUpdated":"2020-01-08T18:01:52+0000","config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------------+--------------------------+--------------------+\n|         prediction|neighbourhood_group_number|            features|\n+-------------------+--------------------------+--------------------+\n| 0.3360375055728944|              North Region|[0.0,1.35114,103....|\n| 0.3360375055728944|              North Region|[0.0,1.35135,103....|\n| 0.3360375055728944|              North Region|[0.0,1.35148,103....|\n| 0.3360375055728944|              North Region|[0.0,1.35153,103....|\n| 0.3360375055728944|              North Region|[0.0,1.35233,103....|\n| 0.3360375055728944|              North Region|[0.0,1.35244,103....|\n|0.06566971991029343|              North Region|[0.0,1.41016,103....|\n|0.06566971991029343|              North Region|[0.0,1.41169,103....|\n|0.06566971991029343|              North Region|[0.0,1.41182,103....|\n|0.06566971991029343|              North Region|[0.0,1.41482,103....|\n+-------------------+--------------------------+--------------------+\nonly showing top 10 rows\n\nRoot Mean Squared Error (RMSE) on test data = 0.0470259\nRandomForestRegressionModel (uid=RandomForestRegressor_46c28cfe9ed6402fef7c) with 20 trees\n"}]},"apps":[],"jobName":"paragraph_1578506408072_685897845","id":"20191221-094234_782442846","dateCreated":"2020-01-08T18:00:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:885","dateFinished":"2020-01-08T18:01:56+0000","dateStarted":"2020-01-08T18:01:52+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=21","http://172.17.0.2:4040/jobs/job?id=22","http://172.17.0.2:4040/jobs/job?id=23","http://172.17.0.2:4040/jobs/job?id=24","http://172.17.0.2:4040/jobs/job?id=25","http://172.17.0.2:4040/jobs/job?id=26","http://172.17.0.2:4040/jobs/job?id=27","http://172.17.0.2:4040/jobs/job?id=28","http://172.17.0.2:4040/jobs/job?id=29","http://172.17.0.2:4040/jobs/job?id=30","http://172.17.0.2:4040/jobs/job?id=31","http://172.17.0.2:4040/jobs/job?id=32","http://172.17.0.2:4040/jobs/job?id=33","http://172.17.0.2:4040/jobs/job?id=34","http://172.17.0.2:4040/jobs/job?id=35"],"interpreterSettingId":"spark"}}},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2020-01-08T18:00:08+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578506408073_1047251428","id":"20191221-175533_1725985249","dateCreated":"2020-01-08T18:00:08+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:886"}],"name":"Quection_2.3_3.0","id":"2EY76VZSW","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}